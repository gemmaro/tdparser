var search_data = {"index":{"searchIndex":["tdparser","parser","stringtokenizer","tokengenerator","xmlparser","xmltokengenerator","%()","*()","+()","-()","/()","==()",">()",">>()","any()","any_node()","any_rule()","attlistdecl()","back_ref()","backref()","call()","cdata()","chain_left()","chain_right()","chainl()","chainr()","comment()","condition()","condition_rule()","define()","do()","doctype()","dom_constructor()","element()","elementdecl()","empty()","empty_rule()","end_doctype()","end_element()","entitydecl()","externalentity()","fail()","fail_rule()","left_rec()","leftrec()","new()","new()","new()","next()","next?()","none()","none_rule()","notationdecl()","optimize()","parse()","peek()","pi()","right_rec()","rightrec()","rule()","same?()","shift()","stack_ref()","stackref()","start_doctype()","start_element()","state()","text()","to_a()","to_proc()","to_s()","token()","unshift()","xmldecl()","|()","readme","faq","guide"],"longSearchIndex":["tdparser","tdparser::parser","tdparser::stringtokenizer","tdparser::tokengenerator","tdparser::xmlparser","tdparser::xmltokengenerator","tdparser::parser#%()","tdparser::parser#*()","tdparser::parser#+()","tdparser::parser#-()","tdparser::parser#/()","tdparser::parser#==()","tdparser::parser#>()","tdparser::parser#>>()","tdparser#any()","tdparser::xmlparser#any_node()","tdparser#any_rule()","tdparser::xmlparser#attlistdecl()","tdparser#back_ref()","tdparser#backref()","tdparser::parser#call()","tdparser::xmlparser#cdata()","tdparser#chain_left()","tdparser#chain_right()","tdparser#chainl()","tdparser#chainr()","tdparser::xmlparser#comment()","tdparser#condition()","tdparser#condition_rule()","tdparser::define()","tdparser::parser#do()","tdparser::xmlparser#doctype()","tdparser::xmlparser#dom_constructor()","tdparser::xmlparser#element()","tdparser::xmlparser#elementdecl()","tdparser#empty()","tdparser#empty_rule()","tdparser::xmlparser#end_doctype()","tdparser::xmlparser#end_element()","tdparser::xmlparser#entitydecl()","tdparser::xmlparser#externalentity()","tdparser#fail()","tdparser#fail_rule()","tdparser#left_rec()","tdparser#leftrec()","tdparser::stringtokenizer::new()","tdparser::tokengenerator::new()","tdparser::xmltokengenerator::new()","tdparser::tokengenerator#next()","tdparser::tokengenerator#next?()","tdparser#none()","tdparser#none_rule()","tdparser::xmlparser#notationdecl()","tdparser::parser#optimize()","tdparser::parser#parse()","tdparser::parser#peek()","tdparser::xmlparser#pi()","tdparser#right_rec()","tdparser#rightrec()","tdparser#rule()","tdparser::parser#same?()","tdparser::tokengenerator#shift()","tdparser#stack_ref()","tdparser#stackref()","tdparser::xmlparser#start_doctype()","tdparser::xmlparser#start_element()","tdparser#state()","tdparser::xmlparser#text()","tdparser::tokengenerator#to_a()","tdparser::parser#to_proc()","tdparser::parser#to_s()","tdparser#token()","tdparser::tokengenerator#unshift()","tdparser::xmlparser#xmldecl()","tdparser::parser#|()","","",""],"info":[["TDParser","","TDParser.html","",""],["TDParser::Parser","","TDParser/Parser.html","",""],["TDParser::StringTokenizer","","TDParser/StringTokenizer.html","",""],["TDParser::TokenGenerator","","TDParser/TokenGenerator.html","",""],["TDParser::XMLParser","","TDParser/XMLParser.html","",""],["TDParser::XMLTokenGenerator","","TDParser/XMLTokenGenerator.html","",""],["%","TDParser::Parser","TDParser/Parser.html#method-i-25","(other)",""],["*","TDParser::Parser","TDParser/Parser.html#method-i-2A","(other)",""],["+","TDParser::Parser","TDParser/Parser.html#method-i-2B","(other)",""],["-","TDParser::Parser","TDParser/Parser.html#method-i-2D","(other)",""],["/","TDParser::Parser","TDParser/Parser.html#method-i-2F","(other)",""],["==","TDParser::Parser","TDParser/Parser.html#method-i-3D-3D","(_other)",""],[">","TDParser::Parser","TDParser/Parser.html#method-i-3E","(other)",""],[">>","TDParser::Parser","TDParser/Parser.html#method-i-3E-3E","(other)",""],["any","TDParser","TDParser.html#method-i-any","()",""],["any_node","TDParser::XMLParser","TDParser/XMLParser.html#method-i-any_node","(&)",""],["any_rule","TDParser","TDParser.html#method-i-any_rule","()",""],["attlistdecl","TDParser::XMLParser","TDParser/XMLParser.html#method-i-attlistdecl","(_decl = String)",""],["back_ref","TDParser","TDParser.html#method-i-back_ref","(x, eqsym = :===)",""],["backref","TDParser","TDParser.html#method-i-backref","(x, eqsym = :===)",""],["call","TDParser::Parser","TDParser/Parser.html#method-i-call","(*args)",""],["cdata","TDParser::XMLParser","TDParser/XMLParser.html#method-i-cdata","(match = String)",""],["chain_left","TDParser","TDParser.html#method-i-chain_left","(base, *infixes, &)",""],["chain_right","TDParser","TDParser.html#method-i-chain_right","(base, *infixes, &)",""],["chainl","TDParser","TDParser.html#method-i-chainl","(base, *infixes, &)",""],["chainr","TDParser","TDParser.html#method-i-chainr","(base, *infixes, &)",""],["comment","TDParser::XMLParser","TDParser/XMLParser.html#method-i-comment","(match = String)",""],["condition","TDParser","TDParser.html#method-i-condition","(&)",""],["condition_rule","TDParser","TDParser.html#method-i-condition_rule","(&)",""],["define","TDParser","TDParser.html#method-c-define","(*_args, &)",""],["do","TDParser::Parser","TDParser/Parser.html#method-i-do","(&block)",""],["doctype","TDParser::XMLParser","TDParser/XMLParser.html#method-i-doctype","(name = String, &inner)",""],["dom_constructor","TDParser::XMLParser","TDParser/XMLParser.html#method-i-dom_constructor","(&act)",""],["element","TDParser::XMLParser","TDParser/XMLParser.html#method-i-element","(elem = String, &inner)",""],["elementdecl","TDParser::XMLParser","TDParser/XMLParser.html#method-i-elementdecl","(elem = String)",""],["empty","TDParser","TDParser.html#method-i-empty","(&)",""],["empty_rule","TDParser","TDParser.html#method-i-empty_rule","(&)",""],["end_doctype","TDParser::XMLParser","TDParser/XMLParser.html#method-i-end_doctype","()",""],["end_element","TDParser::XMLParser","TDParser/XMLParser.html#method-i-end_element","(name = String)",""],["entitydecl","TDParser::XMLParser","TDParser/XMLParser.html#method-i-entitydecl","(_entity = String)",""],["externalentity","TDParser::XMLParser","TDParser/XMLParser.html#method-i-externalentity","(entity = String)",""],["fail","TDParser","TDParser.html#method-i-fail","()",""],["fail_rule","TDParser","TDParser.html#method-i-fail_rule","()",""],["left_rec","TDParser","TDParser.html#method-i-left_rec","(*rules, &act)",""],["leftrec","TDParser","TDParser.html#method-i-leftrec","(*rules, &act)",""],["new","TDParser::StringTokenizer","TDParser/StringTokenizer.html#method-c-new","(rule, ignore = nil)",""],["new","TDParser::TokenGenerator","TDParser/TokenGenerator.html#method-c-new","(args = nil, &block)",""],["new","TDParser::XMLTokenGenerator","TDParser/XMLTokenGenerator.html#method-c-new","(src)",""],["next","TDParser::TokenGenerator","TDParser/TokenGenerator.html#method-i-next","()",""],["next?","TDParser::TokenGenerator","TDParser/TokenGenerator.html#method-i-next-3F","()",""],["none","TDParser","TDParser.html#method-i-none","()",""],["none_rule","TDParser","TDParser.html#method-i-none_rule","()",""],["notationdecl","TDParser::XMLParser","TDParser/XMLParser.html#method-i-notationdecl","(_decl = String)",""],["optimize","TDParser::Parser","TDParser/Parser.html#method-i-optimize","(_default = false)",""],["parse","TDParser::Parser","TDParser/Parser.html#method-i-parse","(tokens = nil, buff = nil, &blk)",""],["peek","TDParser::Parser","TDParser/Parser.html#method-i-peek","()",""],["pi","TDParser::XMLParser","TDParser/XMLParser.html#method-i-pi","()",""],["right_rec","TDParser","TDParser.html#method-i-right_rec","(*rules, &act)",""],["rightrec","TDParser","TDParser.html#method-i-rightrec","(*rules, &act)",""],["rule","TDParser","TDParser.html#method-i-rule","(sym, *opts)",""],["same?","TDParser::Parser","TDParser/Parser.html#method-i-same-3F","(r)",""],["shift","TDParser::TokenGenerator","TDParser/TokenGenerator.html#method-i-shift","()",""],["stack_ref","TDParser","TDParser.html#method-i-stack_ref","(stack, eqsym = :===)",""],["stackref","TDParser","TDParser.html#method-i-stackref","(stack, eqsym = :===)",""],["start_doctype","TDParser::XMLParser","TDParser/XMLParser.html#method-i-start_doctype","(name = String)",""],["start_element","TDParser::XMLParser","TDParser/XMLParser.html#method-i-start_element","(name = String)",""],["state","TDParser","TDParser.html#method-i-state","(s)",""],["text","TDParser::XMLParser","TDParser/XMLParser.html#method-i-text","(match = String)",""],["to_a","TDParser::TokenGenerator","TDParser/TokenGenerator.html#method-i-to_a","()",""],["to_proc","TDParser::Parser","TDParser/Parser.html#method-i-to_proc","()",""],["to_s","TDParser::Parser","TDParser/Parser.html#method-i-to_s","()",""],["token","TDParser","TDParser.html#method-i-token","(x, eqsym = :===)",""],["unshift","TDParser::TokenGenerator","TDParser/TokenGenerator.html#method-i-unshift","(*token)",""],["xmldecl","TDParser::XMLParser","TDParser/XMLParser.html#method-i-xmldecl","()",""],["|","TDParser::Parser","TDParser/Parser.html#method-i-7C","(other)",""],["README","","README.html","","<p>TDParser\n<p>This is a top-down parser combinator library for Ruby (LL(k) parser), and is a successor of  …\n"],["faq","","doc/faq_rdoc.html","","<p>How do I write a rule that represents left/right-associative infix operators\n<p>One of the good example is …\n"],["guide","","doc/guide_rdoc.html","","<p>TDParser Programmers Guide\n<p>TDParser is a Ruby component that helps us to construct a top-down parser using …\n"]]}}